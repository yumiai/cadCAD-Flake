{
  # cadCad package needs to be rebuilt in order to work with ipython kernals
  description = "A flake building jupyter Notebook with cadCAD.";

  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixpkgs-unstable";
    flake-utils.url = "github:numtide/flake-utils";
    flake-utils.inputs.nixpkgs.follows = "nixpkgs";
    flake-compat.url = "github:edolstra/flake-compat";
    flake-compat.flake = false;
    flake-compat.inputs.nixpkgs.follows = "nixpkgs";
    poetry2nix.url = "github:nix-community/poetry2nix";
    jupyterWith.url = "github:tweag/jupyterWith";
    nix-filter.url = "github:numtide/nix-filter";
  };

  outputs = inputs@{ self, nixpkgs, flake-utils, flake-compat,poetry2nix, jupyterWith, ... }:
    flake-utils.lib.eachDefaultSystem  ( system:
    let
      pkgs = import nixpkgs { inherit system; overlays = nixpkgs.lib.attrValues jupyterWith.overlays; };
      inherit (pkgs) lib stdenv;

      # Non-Flake input, so need to import it.
      # npmlock2nix = pkgs.callPackages inputs.npmlock2nix {};

      # Fix-up the flake introduced name for nix-filter for consistency.
      nix-filter = inputs.nix-filter.lib;

      # To get good build times it's vitally important to not have to rebuild 
      # derivation needlessly. The way Nix caches things is very simple: if 
      # any input file changed, derivation needs to be rebuild. Use nix-filter
      # to include or exlude files and directories from a derivation build.
      commonFilters = rec {
        markdownFiles = [(nix-filter.matchExt "md")];
        nixFiles = [(nix-filter.matchExt "nix")];
      };

      # Common derivation arguments used for all builds
      commonArgs =  {
        name = "jupyter";
        root = ./.;
      };

      # Use a standard way of naming derivations package names.
      packageName = suffix: commonArgs.name + "-" + suffix;

      cadCAD = p: with p; with pkgs; with python3Packages; buildPythonPackage rec {
        pname = "cadCAD";
        version = "0.4.23";
        src = fetchPypi {
            inherit pname version;
            sha256 = "6c9fcc2cff34e0eae00f33ec3291f8ffc7452c8621c0aa6d900d1dfe2acd1625";
            };
        propagatedBuildInputs = [ ppft multiprocess pox dill pathos pytz pandas funcy fn ];
        doCheck = false;
      };


      ipythonKernal = pkgs.kernels.iPythonWith {
        name = commonArgs.name;
        packages = p: with p;
                    [  
                      seaborn 
                      matplotlib 
                      pandas 
                      numpy
                      (cadCAD p)
                   ];
        };
      
      jupyterEnvironment = pkgs.jupyterlabWith {
        kernels = [ ipythonKernal ];
        directory = ./.;
        };
    in 
    {
      packages = {
        default = cadCAD;
      };
      devShells = {
        default = jupyterEnvironment.env;
        };
    });
  }